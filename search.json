[

 {
  "title": "Blog",
  "url": "/blog.html",
  "content": "Latest Posts        Demo    Example blog post intro    "
 },
 {
  "title": "Coming soon",
  "url": "/docs/playbooks/coming-soon.html",
  "content": "Coming soonOh yeah, were working on it!"
 },
 {
  "title": "References",
  "url": "/docs/references/index.html",
  "content": "ReferencesContinuous Delivery isnt new. Its been commonplace in many companies for over a decade. Included here is a list of informationresources weve found helpful as weve continued to improve.  References          Microservices      Understanding DevOps      Continuous Integration      Continuous Delivery      Domain Driven Design      TDD/BDD      Pair Programming      Suggested Reading                  Accelerate: by Nicole Forsgren, Jez Humble, &amp;amp; Gene Kim          BDD in Action: by John Ferguson Smart          Continuous Delivery: by Jez Humble &amp;amp; David Farley          Implementing Domain-Driven Design: by Vaughn Vernon          Paul Hammant Blog          Working Effectively with Legacy Code by Michael Feathers                    References by Topic                  Architecture          Estimating Stories          Evolutionary Database          Evolutionary Development          Flow Management          Operational Stability          Product Ownership          Source Management          Strangler Pattern          Teamwork          Testing &amp;amp; Quality                    Feature Flags      Microservices  Microservices Architectural Design Patterns PlaybookUnderstanding DevOps  Understanding DevopsContinuous Integration  Continuous Integration  Integration TestingContinuous Delivery  Continuous Integration Big Picture  Implementing Continuous Delivery  Docker Ansible Continuous Delivery  Continuous-Database-DeliveryDomain Driven Design  Domain Driven Design Fundamentals  Domain Driven Design In Practice  Domain Driven Design Legacy Projects  Modern Software ArchitectureTDD/BDD  Test First Development Part-1  Test First Development Part-2  Outside In TDD  Test Driven Development Big Picture  Pragmatic-BDD-Dotnet  Clean Architecture Patterns  Pragmatic-Unit-Testing  TDD Junit5  TDD As Design Tool  Play By Play Wilson TDDPair Programming  Pair ProgrammingSuggested ReadingAccelerate: by Nicole Forsgren, Jez Humble, &amp;amp; Gene Kim  Safari Books  Purchase  Does technology actually matter? And how can we apply technology to drive business value?  For years, we&#39;ve been told that the performance of software delivery teams doesn&#39;t matter;  that it can&#39;t provide a competitive advantage to our companies.  Through four years of groundbreaking research, Dr. Nicole Forsgren, Jez Humble, and  Gene Kim set out to find a way to measure software delivery performanceand what drives  it, using rigorous statistical methods. This book presents both the findings and the  science behind that research. Readers will discover how to measure the performance of  their teams, and what capabilities they should invest in to drive higher performance.BDD in Action: by John Ferguson Smart  Safari Books  BDD in Action teaches you BDD principles and practices and shows you how to integrate them into your  existing development process, no matter what language you use.  First, you&#39;ll apply BDD to requirements analysis so you can focus your development efforts on  underlying business goals.  Then, you&#39;ll discover how to automate acceptance criteria and use tests to guide and report on  the development process.  Along the way, you&#39;ll apply BDD principles at the coding level to write more maintainable and  better documented code.Continuous Delivery: by Jez Humble &amp;amp; David Farley  Safari Books  Purchase  Getting software released to users is often a painful, risky, and time-consuming process. This  groundbreaking new book sets out the principles and technical practices that enable rapid,  incremental delivery of high quality, valuable new functionality to users.Implementing Domain-Driven Design: by Vaughn Vernon  Safari Books  Implementing Domain-Driven Design presents a top-down approach to understanding domain-driven  design (DDD) in a way that fluently connects strategic patterns to fundamental tactical  programming tools. Vaughn Vernon couples guided approaches to implementation with modern  architectures, highlighting the importance and value of focusing on the business domain while  balancing technical considerations.Paul Hammant Blog  Blog  Call to Arms: Average Story Sizes of One Day  Trunk Based Development  Branch by AbstractionWorking Effectively with Legacy Code by Michael Feathers  Safari Books   Is your code easy to change? Can you get nearly instantaneous feedback when you do change it?   Do you understand it? If the answer to any of these questions is no, you have legacy code,   and it is draining time and money away from your development efforts.   In this book, Michael Feathers offers start-to-finish strategies for working more effectively   with large, untested legacy code bases. This book draws on material Michael created for his   renowned Object Mentor seminars: techniques Michael has used in mentoring to help hundreds   of developers, technical managers, and testers bring their legacy systems under control.   The topics covered include   * Understanding the mechanics of software change: adding features, fixing bugs, improving     design, optimizing performance   * Getting legacy code into a test harness   * Writing tests that protect you against introducing new problems   * Techniques that can be used with any language or platformwith examples in Java, C++,     C, and C#   * Accurately identifying where code changes need to be made   * Coping with legacy systems that aren&#39;t object-oriented   * Handling applications that don&#39;t seem to have any structureReferences by TopicArchitectureDelivering quickly goes beyond build automation. Decomposing applications into small, decoupled, individually deployable components is key to rapid feedback.  Architecture Decision Records: A really powerful, lightweight way to document.  12 Factor App  Martin Fowler on Domain Driven Design  Domain Driven Design for Service ArchitectureEstimating StoriesOne of the struggles many teams have is how to break down stories and how to properly estimate work. Heres some resources weve found that have helped us in the past.  Estimating Complexity  BDD with Cynefin - Liz Keogh  BDD and estimation resources  Your stories are too bigEvolutionary DatabaseThe database is just another service and needs to maintain its contract with consumers. Heres some resources on how to get that done.  The 10 Rules of Schema GrowthEvolutionary DevelopmentChanges should be planned to allow daily deployment of the most current code without breaking the current functionality.  Branch by Abstraction  Consumer-driven ContractsFlow ManagementTheres more than one way to manage flow, but all of them take practice and discipline to execute.  Scrum vs. Kanban  Kanban Resources  Scrum Resources  Lean PrinciplesOperational StabilityIs your application ready for production?  Google SRE GuideProduct OwnershipThe role of the Product Owner is commonly misunderstood. Heres a quick video that explains how it works.If you have questions about this information or or suggestions for improvement, please contact us at #devops-dojo.Source ManagementProper source management is foundational. Everything related to value delivery must be source controlled, including documentation.  Trunk Based Development  Death of Continuous IntegrationStrangler Pattern  Extracting Data Rich ServicesTeamwork  Designing Product Teams  The Infuence of Organizational Structure on Software QualityTesting &amp;amp; QualityDeveloper driven testing is required for CD to function. Heres some resources to get you started and some ideas to help you explore new way to get effective testing done.  FIRST Principles  The Practical Test Pyramid  Code Coverage Targets  Microservice Testing Strategies  Behavior Driven Development  Consumer Driven Contract Testing  Software Testing Cupcake  Resiliency Testing  Just Say No to More End-to-End Tests  Testing in Production  Node Testing Good PracticesFeature Flags  Feature Flags, Toggles, Controls"
 },
 {
  "title": "Sharing",
  "url": "/docs/playbooks/sharing/index.html",
  "content": "SharingThis is WIP"
 },
 {
  "title": "Culture",
  "url": "/docs/playbooks/culture/index.html",
  "content": "Culture  Culture Charter to help team adopt the culture of DevOps  Change Champion NetworkThis is WIP"
 },
 {
  "title": "Lean Process",
  "url": "/docs/playbooks/lean/index.html",
  "content": "Lean ProcessThe DevOps L in CALMS is for Lean. Without utilizing Lean principles and process for software delivery, DevOps is lost.The Dojo experience is all about reinforcing Lean principles and practices into the team DNA to enable programs success.The Value Stream  Value Stream Team Orientation  Value Stream Mapping WorkshopApplying Lean Principles  The 7 Lean Principles  The 7 Wastes in Software Development  Cost of DelayHistory of Lean  Deming  Popendiek"
 },
 {
  "title": "Metrics",
  "url": "/docs/playbooks/metrics/index.html",
  "content": "MetricsThe right metrics used the right way in the right combination are key to improvement.This is WIP"
 },
 {
  "title": "Automation",
  "url": "/docs/playbooks/automation/index.html",
  "content": "AutomationThis is WIP"
 },
 {
  "title": "Agile",
  "url": "/docs/playbooks/agile/index.html",
  "content": "Agile  Agile values and principles  Methodologies  Story Slicing Techniques"
 },
 {
  "title": "Product",
  "url": "/docs/playbooks/product/index.html",
  "content": "Product  Developing a product strategy  Defining business outcomes"
 },
 {
  "title": "Dojo Playbooks",
  "url": "/docs/playbooks/index.html",
  "content": "Dojo PlaybooksThe enclosed playbooks are contributed by multiple Consortium members and reflect the practices of those individual Dojos. They are all wrong in some way, but are the best practices we know currently.Playbooks are focused documents that can be used as a reference by teams wanting to improve how they perform an activity or those helping to coach teams. Each playbook is focused on a single pain point or practice.Recommended PracticesA playbook should follow the following structure:  Definition of what the playbook is trying to accomplish.  A label of the target audience  Recommended, actionable practices that have been found effective.  Tips and tricks that have been found useful in the past.TipsKeep the playbook short enough that it can be consumed quickly. Think 5 minute read, not a novella. Slice if required."
 },
 {
  "title": "Dojo Material",
  "url": "/docs/index.html",
  "content": "Dojo MaterialEnclosed is material used by several Dojos for either direct training or indirect knowledge transfer for their organizations.  Playbooks: Coaching material and suggested practices.  References: Reference material, books, and videos we refer others to."
 },
 {
  "title": "About the DevOps Dojo Consortium",
  "url": "/overview/index.html",
  "content": "We are collaboration a of enterprise Dojos all seeking to improve both the outcomes of their companies and thequality of life of product teams.DevOps is often used to mean different things and many people new to DevOps instantly focus on what tools to buy. You cannot buyDevOps and tools represent a small portion of the solution. In our context, these are our guiding principles for DevOpsDevOps should be defined by the outcomes. It is those sets of cultural norms andtechnology practices that enable the fast flow of planned work from, among otherthings, development through tests into operations, while preserving world classreliability, operation, and security. DevOps is not about what you do, but whatyour outcomes are. So many things that we associate with DevOps, such ascommunication and culture, fit underneath this very broad umbrella of beliefsand practices.-- Gene Kim, 2014Each of the Dojos operate in their particular contexts with individualized implementation, but the overall goal is improving thecontinuous flow of value to the end user with people collaborating with lean processes and heavy automation."
 },
 {
  "title": "About the DevOps Dojo Consortium",
  "url": "/index.html",
  "content": "We are a collaboration of enterprise Dojos all seeking to improve both the outcomes of their companies and thequality of life of product teams.DevOps is often used to mean different things and people new to DevOps often focus on tooling. You cannot buy DevOps and tools represent a small portion of the solution. In our context, this is guiding principle for DevOpsDevOps should be defined by the outcomes. It is those sets of cultural norms andtechnology practices that enable the fast flow of planned work from, among otherthings, development through tests into operations, while preserving world classreliability, operation, and security. DevOps is not about what you do, but whatyour outcomes are. So many things that we associate with DevOps, such ascommunication and culture, fit underneath this very broad umbrella of beliefsand practices.-- Gen Kim, 2014Each of the Dojos operate in their particular contexts with individualized implementation, but the overall goal is improving thecontinuous flow of value to the end user with people collaborating with lean processes and heavy automation."
 },

 {
  "title": "Training",
  "url": "/training.html",
  "content": "# {{ page.title }}&gt; Check out the [slides](./training/dojo-overview.html)"
 },
 {
  "title": "Value Stream Orientation",
  "url": "/docs/playbooks/lean/value-stream-orientation.html",
  "content": "# {{ page.title }}## IntroductionOne of the most important coaching goals in a Dojo challenge is to inspire the team to understand the system view, specifically how value flows from ideation all the way to deployment and support. It isn&#39;t the &quot;First Way&quot; of DevOps for nothing. However, the question we often get sounds something like:&gt; Is it really necessary to train everyone regarding the overall system? Our developers need to be heads down and let the architects, RTE&#39;s, and other Program leaders manage the big picture.Of course as you read that question you can easily detect it resembles a defense of a well established management paradigm. Broaching this subject in your Dojo will require a healthy combination of some of these organizational attributes:* Understanding that DevOps is more than just pipeline tooling skills.* Sufficient framing and preparation with managers that the team will be empowered toward autonomy while entrusted to the Dojo.* Trust that the Dojo coaches are working toward the good of all, not just the team members.* Openness that despite how teams are currently aligned, that teams can contribute realignment insights to improve feature lead times. * A catching on of the fact that software architecture is a skill vs being a role.Even heavily matrixed organizations mired in a negative cycle of pointing people&#39;s attention back toward their siloed constraints are coming around to the realization that they must at least make the Value Stream visible in some way. We beleive the Dojo can demonstrate value to both the team and the programs they serve by establishing a Value Stream orientation in the early stages of the engagement. We map the value stream early on. We call out dependencies. We reduce handoffs where empowered. We report on the waste in handoffs where not empowered. In all this, we see time and time again that Value Stream orientation in the Dojo creates retained value for the team and creates viral value for other programs in the organization watching all this transpire. "
 },
 {
  "title": "Value Stream Mapping Workshop",
  "url": "/docs/playbooks/lean/wm-vsm.html",
  "content": "# {{ page.title }}The purpose of Value Stream Mapping Workshop is to understand all of the steps needed todeliver value from conception to production. We can then use it as a tool toidentify constraints and propose improvements to the value stream.## Recommended Practices1. Everyone who has a touch point in the value stream should be present for the   exercise. This includes, but is not limited to, the developers, the   engineering manager, the product owner, and representatives from any external   teams that have required steps between idea and production.2. Start with an introduction to what value stream mapping is, and why it is important.### Explain the terms associated with value stream mapping- Build Cycle Time: Total duration of the build, from commit to deploy.- Development Cycle Time: The time from when work begins until it is deployed to production. Done.- Lead Time: The time taken from start to end of the value stream.- Process Time / Value Add Time: The time spent executing a particular process.- Wait Time / Non-value Time: The time between processes where no activity is occurring.- Percent Complete and Accurate: The percentage of work from a process that is   rejected by the next process. If coding fails code review 20% of the time,   it&#39;s %C/A is 80%.### Identify source of request*Example:* Refine EpicFor each source of _Requests_  1. What is the outcome of that step, or next step?  2. Who is involved in that step?  3. How long does this step take?  4. How long between the previous and current steps?### Identify Rework Loops for each step1. To which steps do we return to from this one for corrections?2. How often is work rejected from this step (percentage complete and accurate)?### Identify value added time, cycle time, and lead time1. What is the total value time (time spent doing work) from conception to production?2. What is the total non-value time (time waiting) from conception to production?## Outcomes- Visual representation of the value stream(s) of the team.- Identify possible constraints to flow based on value added time, cycle time, and lead time.## Sample Workshop AgendaThe below sample is for a 3 day workshop that focuses more on the flow of work and less on the numbers.  If you would like to go into more of the metrics extending the workshop to 5 days would allow for that.#### Day 1- Workshop working agreements- Review of workshop charter- Create/interate through current state value stream map#### Day 2- Refine Value Stream Map and add data points- Identify waste and oppotunities to improve the flow of work- Start future sate value stream map#### Day 3- Complete future state value stream map- Document/prioritize Kiazen improvement opportunities## Tips- Involve all team members associated to any part of the process of getting value from conception to production.- Review and maintain value stream map to show wins associated to implementing improvement.- Take into account all potential flows for team processes, and value stream those as well.## ValueAs a team, we want to understand how to value stream map our team processes, so that we may understand bottlenecks associated to delivering value, and identify areas of improvement.## Acceptance Criteria- Value stream all things associated to delivering value.- Create action items of improvement from exercise.## References- [Value Stream Mapping Guide](https://creately.com/blog/diagrams/value-stream-mapping-guide/)- [Value Stream Mapping: How to Visualize Work and Align Leadership for Organizational Transformation](https://learning.oreilly.com/library/view/value-stream-mapping/9780071828918/)"
 },

{
  "title": "Demo",
  "url": "/blog/2019-08-03-demo.html",
  "date": "2019-08-03 00:00:00 +0000",
  "content": "Example blog post introThe rest of the blog post after the first para"
 },
 {
  "title": "",
  "url": "",
  "date": "",
  "content": ""
 }
]