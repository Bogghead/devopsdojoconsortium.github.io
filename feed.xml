<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://dojoconsortium.org/index.html/feed.xml" rel="self" type="application/atom+xml" /><link href="http://dojoconsortium.org/index.html/" rel="alternate" type="text/html" /><updated>2019-09-07T13:25:03+00:00</updated><id>http://dojoconsortium.org/index.html/feed.xml</id><title type="html">Dojo Consortium</title><subtitle>Open Sourcing Enterprise Transformation.</subtitle><entry><title type="html">5 Minute DevOps - GitFlow Best Practices</title><link href="http://dojoconsortium.org/index.html/blog/2019-09-07-bfinster.html" rel="alternate" type="text/html" title="5 Minute DevOps - GitFlow Best Practices" /><published>2019-09-07T00:00:00+00:00</published><updated>2019-09-07T00:00:00+00:00</updated><id>http://dojoconsortium.org/index.html/blog/bfinster</id><content type="html" xml:base="http://dojoconsortium.org/index.html/blog/2019-09-07-bfinster.html">&lt;p&gt;I was asked recently about the best practice for using GitFlow with continuous integration. For those who do not know, this is GitFlow:&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;../assets/img/posts/giflow.png&quot; width=&quot;35%&quot; alt=&quot;Post from 2010: https://nvie.com/posts/a-successful-git-branching-model/&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There is no CI good practice that includes GitFlow. For continuous integration to meet the definition, these are the good practices:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Developers must implement &lt;strong&gt;all&lt;/strong&gt; tests before they commit code. This is a non-negotiable and I will not work with developers who refuse to test. Professionals deliver working, tested code. Script kiddies don’t test.&lt;/li&gt;
  &lt;li&gt;Use CI automation to trigger builds for every pull request so that bad changes can be rejected before code review.&lt;/li&gt;
  &lt;li&gt;Ensure that all tests are executed and linting and static code analysis is done for every PR.&lt;/li&gt;
  &lt;li&gt;Implement CI practices:
    &lt;ul&gt;
      &lt;li&gt;All developers branch from the trunk, make changes, and submit PRs back to trunk.&lt;/li&gt;
      &lt;li&gt;The branches are removed in less than 24 hours.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You’re now doing Trunk Based Development. Welcome to your CI/CD journey!&lt;/p&gt;

&lt;p&gt;The complexity of the CI automation will depend on how poorly the application is architected and the size of the development team. Monoliths with poor sub-domain boundaries will require much more complicated test design and test execution will take much longer. Evolve The architecture into independent, loosely coupled sub-domains to improve delivery speed, reduce testing overhead, and improve stability, resilience, and scalability.&lt;/p&gt;

&lt;p&gt;GitFlow does not increase quality or value delivery. It delays quality signal feedback to the developers, incentivizes manual process, and is incredibly wasteful of time and resources. No modern development uses it.&lt;/p&gt;

&lt;p&gt;Some developers have a religion built around GitFlow because it reduces typing (reduced pain from not testing) and they don’t track their levels of re-work, lost changes, or conflict resolution. In 2010, GitFlow felt good. We could keep Master “clean”. That was almost a decade ago. Testing was still mostly manual. We were still on Java 6. NodeJS was barely a thing. Time to modernize. We don’t keep Master clean with process. We keep it clean with automation.&lt;/p&gt;

&lt;p&gt;Other examples:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://itrevolution.com/the-amazing-devops-transformation-of-the-hp-laserjet-firmware-team-gary-gruver/&quot;&gt;The Amazing DevOps Transformation Of The HP LaserJet Firmware Team&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://continuousdelivery.com/&quot;&gt;What is Continuous Delivery?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This post orginally appeared on Medium. You can see other posts in the &lt;code class=&quot;highlighter-rouge&quot;&gt;5 Minute DevOps&lt;/code&gt; series &lt;a href=&quot;https://medium.com/@bdfinst&quot;&gt;there&lt;/a&gt;&lt;/p&gt;</content><author><name>Bryan Finster</name></author><summary type="html">I was asked recently about the best practice for using GitFlow with continuous integration. For those who do not know, this is GitFlow:</summary></entry></feed>